// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Point_of_Sale_Lab3.DB;

#nullable disable

namespace PointofSaleLab3.Migrations
{
    [DbContext(typeof(PointOfSaleContext))]
    [Migration("20221231103958_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Point_of_Sale_Lab3.Models.Business", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("accountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("closing")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("opening")
                        .HasColumnType("datetime2");

                    b.Property<string>("websiteLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("Point_of_Sale_Lab3.Models.Customer", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Point_of_Sale_Lab3.Models.Discount", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("amount")
                        .HasColumnType("float");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("discount")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("percentage")
                        .HasColumnType("bit");

                    b.Property<DateTime>("validFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("validTo")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Point_of_Sale_Lab3.Models.Employee", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("birthdate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("businessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("shiftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("businessId");

                    b.HasIndex("shiftId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Point_of_Sale_Lab3.Models.Item", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("discountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<float>("rating")
                        .HasColumnType("real");

                    b.Property<decimal>("taxablePercent")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("id");

                    b.HasIndex("discountId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Point_of_Sale_Lab3.Models.Order", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("businessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("completedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("customerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("deliveryAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("discountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("businessId");

                    b.HasIndex("customerId");

                    b.HasIndex("discountId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Point_of_Sale_Lab3.Models.Payment", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("customerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("employeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("orderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("payedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("paymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("serviceFee")
                        .HasColumnType("float");

                    b.Property<double>("tip")
                        .HasColumnType("float");

                    b.Property<double>("totalAmount")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.HasIndex("customerId");

                    b.HasIndex("employeeId");

                    b.HasIndex("orderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Point_of_Sale_Lab3.Models.Permission", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Point_of_Sale_Lab3.Models.Shift", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("endTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("startTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("workdays")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("Point_of_Sale_Lab3.Models.SupportRequest", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("businessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("customerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("employeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("issue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("orderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("requestedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("solvedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("businessId");

                    b.HasIndex("employeeId");

                    b.HasIndex("orderId");

                    b.ToTable("SupportRequests");
                });

            modelBuilder.Entity("Point_of_Sale_Lab3.Models.Employee", b =>
                {
                    b.HasOne("Point_of_Sale_Lab3.Models.Business", "business")
                        .WithMany()
                        .HasForeignKey("businessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Point_of_Sale_Lab3.Models.Shift", "shift")
                        .WithMany()
                        .HasForeignKey("shiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("business");

                    b.Navigation("shift");
                });

            modelBuilder.Entity("Point_of_Sale_Lab3.Models.Item", b =>
                {
                    b.HasOne("Point_of_Sale_Lab3.Models.Discount", "discount")
                        .WithMany()
                        .HasForeignKey("discountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("discount");
                });

            modelBuilder.Entity("Point_of_Sale_Lab3.Models.Order", b =>
                {
                    b.HasOne("Point_of_Sale_Lab3.Models.Business", "business")
                        .WithMany()
                        .HasForeignKey("businessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Point_of_Sale_Lab3.Models.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Point_of_Sale_Lab3.Models.Discount", "discount")
                        .WithMany()
                        .HasForeignKey("discountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("business");

                    b.Navigation("customer");

                    b.Navigation("discount");
                });

            modelBuilder.Entity("Point_of_Sale_Lab3.Models.Payment", b =>
                {
                    b.HasOne("Point_of_Sale_Lab3.Models.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Point_of_Sale_Lab3.Models.Employee", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Point_of_Sale_Lab3.Models.Order", "order")
                        .WithMany()
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("employee");

                    b.Navigation("order");
                });

            modelBuilder.Entity("Point_of_Sale_Lab3.Models.SupportRequest", b =>
                {
                    b.HasOne("Point_of_Sale_Lab3.Models.Business", "business")
                        .WithMany()
                        .HasForeignKey("businessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Point_of_Sale_Lab3.Models.Employee", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Point_of_Sale_Lab3.Models.Order", "order")
                        .WithMany()
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("business");

                    b.Navigation("employee");

                    b.Navigation("order");
                });
#pragma warning restore 612, 618
        }
    }
}
